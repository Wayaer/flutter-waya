import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_waya/src/common/CommonWidget.dart';import 'package:flutter_waya/src/constant/WayColor.dart';import 'package:flutter_waya/src/custom/OverlayBase.dart';import 'package:flutter_waya/waya.dart';showToast(message, {Duration closeDuration}) {  AlertUtils.showToast(message.toString(), closeDuration: closeDuration);}showToastWidget(Widget widget, {Duration closeDuration}) {  AlertUtils.showToastWidget(widget, closeDuration: closeDuration);}class AlertUtils {  static BuildContext context = baseContext?.values?.first ?? null;  static OverlayEntry entry;  static Duration _duration;  //设置全局弹窗时间  static setToastDuration(Duration duration) {    _duration = duration;  }  // 自行定义弹窗及关闭  static OverlayEntry alertWidget(Widget widget) {    if (context == null) return null;    entry = OverlayEntry(builder: (context) => widget);    Overlay.of(context).insert(entry);    return entry;  }  static showToast(String message,      {Color backgroundColor,      BoxDecoration boxDecoration,      GestureTapCallback onTap,      TextStyle textStyle,      Duration closeDuration}) {    AlertUtils.showToastWidget(        AlertBase(            backgroundColor: backgroundColor ?? getColors(transparent),            onTap: onTap ?? () {},            child: Container(              margin: EdgeInsets.symmetric(horizontal: BaseUtils.getWidth() / 5, vertical: BaseUtils.getHeight() / 4),              decoration:                  boxDecoration ?? BoxDecoration(color: getColors(black90), borderRadius: BorderRadius.circular(5)),              padding: EdgeInsets.all(BaseUtils.getWidth(10)),              child: CommonWidget.textDefault(message, color: getColors(white)),            )),        closeDuration: closeDuration);  }  static showToastWidget(Widget widget, {Duration closeDuration}) {    if (context == null) return;    OverlayEntry overlayEntry = OverlayEntry(builder: (context) => widget);    Overlay.of(context).insert(overlayEntry);    Future.delayed(closeDuration ?? (_duration ?? Duration(milliseconds: 1500))).then((value) {      overlayEntry.remove();    });  }  static close() {    Overlay.of(context);    if (entry != null) entry.remove();  }  static OverlayEntry alertSureCancel(    Widget widget, {    GestureTapCallback sureTap,    GestureTapCallback cancelTap,    String cancelText,    String sureText,    Widget sure,    Widget cancel,    Color backgroundColor,    TextStyle cancelTextStyle,    TextStyle sureTextStyle,    double height,    bool onTapBackClose: true,    EdgeInsetsGeometry padding,  }) {    AlertUtils.alertWidget(AlertSureCancel(      backsideTap: () {        if (onTapBackClose) close();      },      showWidget: widget,      sureTap: sureTap ??          () {            close();          },      cancelTap: cancelTap ??          () {            close();          },      cancelText: cancelText ?? 'cancle',      sureText: sureText ?? 'sure',      height: height,      cancelTextStyle: cancelTextStyle ?? TextStyle(color: getColors(black)),      sureTextStyle: sureTextStyle ?? TextStyle(color: getColors(black)),      sure: sure,      cancel: cancel,      backgroundColor: backgroundColor ?? getColors(white),      padding: padding,    ));    return entry;  }  static OverlayEntry showLoading({    String text,    double value,    Color backgroundColor,    Animation<Color> valueColor,    double strokeWidth,    String semanticsLabel,    String semanticsValue,    LoadingType loadingType,    TextStyle textStyle,  }) {    AlertUtils.alertWidget(Loading(      text: text,      value: value,      backgroundColor: backgroundColor,      valueColor: valueColor,      strokeWidth: strokeWidth ?? 4.0,      semanticsLabel: semanticsLabel,      semanticsValue: semanticsValue,      loadingType: loadingType ?? LoadingType.circular,      textStyle: textStyle,    ));    return entry;  }}
import 'package:flutter/cupertino.dart';import 'package:flutter_localizations/flutter_localizations.dart';import 'package:flutter_waya/src/custom/OverlayBase.dart';import 'package:flutter_waya/src/utils/BaseNavigatorUtils.dart';class OverlayCupertino extends StatelessWidget {  TextDirection textDirection;  Iterable<Locale> supportedLocales;  Locale locale;  Iterable<LocalizationsDelegate<dynamic>> localizationsDelegates;  List<NavigatorObserver> navigatorObservers;  final GlobalKey<NavigatorState> navigatorKey;  final Widget home;  final CupertinoThemeData theme;  final Map<String, WidgetBuilder> routes;  final String initialRoute;  final RouteFactory onGenerateRoute;  final RouteFactory onUnknownRoute;  final TransitionBuilder builder;  final String title;  final GenerateAppTitle onGenerateTitle;  final Color color;  final LocaleListResolutionCallback localeListResolutionCallback;  final LocaleResolutionCallback localeResolutionCallback;  final bool showPerformanceOverlay;  final bool checkerboardRasterCacheImages;  final bool checkerboardOffscreenLayers;  final bool showSemanticsDebugger;  final bool debugShowCheckedModeBanner;  OverlayCupertino({    Key key,    this.textDirection,    this.navigatorKey,    this.home,    this.theme,    this.routes = const <String, WidgetBuilder>{},    this.initialRoute,    this.onGenerateRoute,    this.onUnknownRoute,    this.navigatorObservers = const <NavigatorObserver>[],    this.builder,    this.title = '',    this.onGenerateTitle,    this.color,    this.locale,    this.localizationsDelegates,    this.localeListResolutionCallback,    this.localeResolutionCallback,    this.supportedLocales = const <Locale>[Locale('en', 'US')],    this.showPerformanceOverlay = false,    this.checkerboardRasterCacheImages = false,    this.checkerboardOffscreenLayers = false,    this.showSemanticsDebugger = false,    this.debugShowCheckedModeBanner = true,  })  : assert(routes != null),        assert(navigatorObservers != null),        assert(title != null),        assert(showPerformanceOverlay != null),        assert(checkerboardRasterCacheImages != null),        assert(checkerboardOffscreenLayers != null),        assert(showSemanticsDebugger != null),        assert(debugShowCheckedModeBanner != null),        super(key: key) {    if (textDirection == null) textDirection = TextDirection.ltr;    if (navigatorObservers == null) navigatorObservers = [BaseNavigatorUtils.getInstance()];    if (locale == null) locale = const Locale('zh');    if (supportedLocales == null) supportedLocales = [const Locale('zh', 'CH')];    if (localizationsDelegates == null)      localizationsDelegates = [GlobalMaterialLocalizations.delegate, GlobalWidgetsLocalizations.delegate];  }  @override  Widget build(BuildContext context) {    return OverlayBase(        textDirection: textDirection,        child: CupertinoApp(          navigatorKey: navigatorKey,          home: home,          theme: theme,          routes: routes,          initialRoute: initialRoute,          onGenerateRoute: onGenerateRoute,          onUnknownRoute: onUnknownRoute,          navigatorObservers: navigatorObservers,          builder: builder,          title: title,          onGenerateTitle: onGenerateTitle,          color: color,          locale: locale,          localizationsDelegates: localizationsDelegates,          localeListResolutionCallback: localeListResolutionCallback,          localeResolutionCallback: localeResolutionCallback,          supportedLocales: supportedLocales,          showPerformanceOverlay: showPerformanceOverlay,          checkerboardRasterCacheImages: checkerboardRasterCacheImages,          checkerboardOffscreenLayers: checkerboardOffscreenLayers,          showSemanticsDebugger: showSemanticsDebugger,          debugShowCheckedModeBanner: debugShowCheckedModeBanner,        ));  }}
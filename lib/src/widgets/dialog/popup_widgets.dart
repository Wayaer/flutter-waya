import 'package:flutter/material.dart';import 'package:flutter_waya/flutter_waya.dart';import 'package:flutter_waya/src/constant/way.dart';typedef ValueCallback<int> = void Function(int titleIndex, int valueIndex);class DropdownMenu extends StatefulWidget {  ///头部数组  final List<String> title;  ///每个头部弹出菜单数组， 必须和title长度一样  final List<List<String>> value;  ///点击头部item回调  final ValueChanged<int> titleTap;  ///点击菜单的回调  final ValueCallback<int> valueTap;  final Color iconColor;  final Color itemBackground;  final Color background;  final Color titleBackground;  final TextStyle titleStyle;  final TextStyle valueStyle;  final double width;  final EdgeInsetsGeometry alertMargin;  final EdgeInsetsGeometry itemPadding;  final Decoration decoration;  final Decoration itemDecoration;  const DropdownMenu({    Key key,    Color itemBackground,    Color titleBackground,    @required this.title,    @required this.value,    this.titleTap,    this.valueTap,    this.titleStyle,    this.valueStyle,    this.width,    this.alertMargin,    this.iconColor,    this.itemPadding,    this.decoration,    this.itemDecoration,    this.background,  })  : this.itemBackground = itemBackground ?? Colors.white,        this.titleBackground = titleBackground ?? Colors.white,        super(key: key);  @override  _DropdownMenuState createState() => _DropdownMenuState();}class _DropdownMenuState extends State<DropdownMenu> {  List<String> title = [];  List<List<String>> value = [];  List<bool> titleState = [];  GlobalKey titleKey = GlobalKey();  void changeState(int index) => setState(() {        titleState[index] = !titleState[index];      });  void popupWidget(int index) {    RenderBox title = titleKey.currentContext.findRenderObject();    var local = title.localToGlobal(Offset.zero);    var titleHeight = context.size.height;    var top = local.dy + titleHeight;    var valueList = value[index];    Widget popup = PopupBase(      top: top,      onTap: () {        changeState(index);        pop();      },      child: Universal(          width: widget.width ?? double.infinity,          margin: widget.alertMargin,          height: double.infinity,          color: widget.background ?? getColors(black70).withOpacity(0.2),          child: ListBuilder(            itemCount: valueList.length,            itemBuilder: (BuildContext ctx, int i) {              var v = valueList[i];              return SimpleButton(                text: v,                width: double.infinity,                textStyle: widget.valueStyle ?? WayStyles.textStyleBlack70(),                onTap: () {                  if (widget.valueTap != null) widget.valueTap(index, valueList.indexOf(v));                  changeState(index);                },                alignment: Alignment.center,                decoration: widget.itemDecoration ??                    BoxDecoration(                        color: widget.itemBackground, border: Border(top: BorderSide(color: getColors(background)))),                padding: widget.itemPadding,                height: titleHeight,              );            },          )),    );    showDialogPopup(widget: popup);  }  @override  Widget build(BuildContext context) {    title = widget.title;    value = widget.value;    if (title.length == 0) return Container();    if (title.length != value.length) return Container();    return Universal(        key: titleKey,        width: widget.width,        padding: EdgeInsets.symmetric(vertical: 10),        mainAxisAlignment: MainAxisAlignment.spaceAround,        direction: Axis.horizontal,        color: widget.titleBackground ?? getColors(white),        decoration: widget.decoration,        children: titleChildren());  }  List<Widget> titleChildren() {    if (title == null || title.length < 1) return [];    return List.generate(title.length, (index) {      titleState.add(false);      return IconBox(        onTap: () {          if (widget.titleTap != null) widget.titleTap(index);          changeState(index);          popupWidget(index);        },        titleStyle: widget.titleStyle,        titleText: title[index],        reversal: true,        color: widget.iconColor ?? getColors(black70),        size: 20,        icon: titleState[index] ? Icons.keyboard_arrow_up : Icons.keyboard_arrow_down,      );    });  }}class PopupSureCancel extends StatelessWidget {  final List<Widget> children;  final GestureTapCallback sureTap;  final GestureTapCallback cancelTap;  final String cancelText;  final String sureText;  final Color backgroundColor;  final Color backsideColor;  final TextStyle cancelTextStyle;  final TextStyle sureTextStyle;  final EdgeInsetsGeometry padding;  final EdgeInsetsGeometry margin;  final Widget sure;  final Widget cancel;  final GestureTapCallback backsideTap;  final double width;  final double height;  final Decoration decoration;  final AlignmentGeometry alignment;  final bool animatedOpacity;  final bool gaussian;  final bool addMaterial;  final PopupMode popupMode;  PopupSureCancel({    Key key,    String cancelText,    String sureText,    Color backgroundColor,    Color backsideColor,    TextStyle cancelTextStyle,    TextStyle sureTextStyle,    double width,    double height,    this.children,    this.sureTap,    this.padding,    this.margin,    this.cancelTap,    this.sure,    this.cancel,    this.backsideTap,    this.alignment,    this.decoration,    this.animatedOpacity,    this.gaussian,    this.addMaterial,    this.popupMode,  })  : this.cancelText = cancelText ?? 'cancel',        this.sureText = sureText ?? 'sure',        this.backgroundColor = backgroundColor ?? getColors(white),        this.backsideColor = backsideColor ?? getColors(black50),        this.width = width ?? ScreenFit.getWidth(0) * 0.85,        this.height = height,        this.sureTextStyle = sureTextStyle ?? WayStyles.textStyleBlack30(),        this.cancelTextStyle = cancelTextStyle ?? WayStyles.textStyleBlack30(),        super(key: key);  @override  Widget build(BuildContext context) {    List<Widget> widgets = [];    widgets.addAll(children);    widgets.add(sureCancel());    return PopupBase(        popupMode: popupMode,        addMaterial: addMaterial,        gaussian: gaussian,        onTap: backsideTap,        color: backsideColor,        alignment: alignment,        child: Universal(          onTap: () {},          width: width,          height: height,          decoration: decoration ?? BoxDecoration(color: backgroundColor),          padding: padding,          margin: margin,          mainAxisSize: MainAxisSize.min,          children: widgets,        ));  }  Widget sureCancel() =>      Universal(direction: Axis.horizontal, mainAxisAlignment: MainAxisAlignment.spaceAround, children: <Widget>[        SimpleButton(            padding: EdgeInsets.symmetric(horizontal: ScreenFit.getWidth(20), vertical: ScreenFit.getHeight(5)),            onTap: cancelTap,            child: cancel,            text: cancelText,            textStyle: cancelTextStyle),        SimpleButton(            onTap: sureTap,            padding: EdgeInsets.symmetric(horizontal: ScreenFit.getWidth(20), vertical: ScreenFit.getHeight(5)),            text: sureText,            child: sure,            textStyle: sureTextStyle),      ]);}class Loading extends Dialog {  final double value;  final Color backgroundColor;  final Animation<Color> valueColor;  final String semanticsLabel;  final String semanticsValue;  final LoadingType loadingType;  final TextStyle textStyle;  final double strokeWidth;  final String text;  final Widget child;  ///是否开始背景模糊  final bool gaussian;  final bool animatedOpacity;  Loading({    Key key,    LoadingType loadingType,    TextStyle textStyle,    double strokeWidth,    String text,    Color backgroundColor,    this.gaussian,    this.animatedOpacity,    this.value,    this.child,    this.valueColor,    this.semanticsLabel,    this.semanticsValue,  })  : this.text = text ?? '加载中...',        this.textStyle = textStyle ?? WayStyles.textStyleBlack70(),        this.strokeWidth = strokeWidth ?? 4.0,        this.backgroundColor = backgroundColor ?? getColors(white),        this.loadingType = loadingType ?? LoadingType.circular,        super(key: key);  @override  Widget build(BuildContext context) {    List<Widget> children = [];    switch (loadingType) {      case LoadingType.circular:        children.add(CircularProgressIndicator(            value: value,            backgroundColor: backgroundColor,            valueColor: valueColor,            strokeWidth: strokeWidth,            semanticsLabel: semanticsLabel,            semanticsValue: semanticsValue));        break;      case LoadingType.linear:        children.add(LinearProgressIndicator(            value: value,            backgroundColor: backgroundColor,            valueColor: valueColor,            semanticsLabel: semanticsLabel,            semanticsValue: semanticsValue));        break;      case LoadingType.refresh:        children.add(RefreshProgressIndicator(            value: value,            backgroundColor: backgroundColor,            valueColor: valueColor,            strokeWidth: strokeWidth,            semanticsLabel: semanticsLabel,            semanticsValue: semanticsValue));        break;    }    children        .add(child == null ? Container(margin: EdgeInsets.only(top: 16), child: Text(text, style: textStyle)) : child);    return PopupBase(        gaussian: gaussian,        alignment: Alignment.center,        onTap: () {},        child: Universal(            padding: EdgeInsets.symmetric(horizontal: 30, vertical: 20),            decoration: BoxDecoration(color: backgroundColor, borderRadius: BorderRadius.circular(8.0)),            mainAxisAlignment: MainAxisAlignment.spaceBetween,            crossAxisAlignment: CrossAxisAlignment.center,            mainAxisSize: MainAxisSize.min,            children: children));  }}
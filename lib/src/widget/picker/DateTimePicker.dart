import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_waya/src/model/MapModel.dart';import 'package:flutter_waya/src/widget/picker/ListWheel.dart';import 'package:flutter_waya/waya.dart';class DateTimePicker extends StatelessWidget {  //补全双位数  bool dual;  //单位是否显示  bool showUnit;  //点击事件  final GestureTapCallback cancelTap;  final ValueChanged<String> sureTap;  //文字  String sureText;  String cancelText;  String titleText;  //容器属性  final Color backgroundColor;  double height;  //时间选择器单位  DateTimePickerUnit unit;  DateTimePickerUnit defaultUnit = DateTimePickerUnit(year: 'Y',      month: 'M',      day: 'D',      hour: 'H',      minute: 'M',      second: 'S');  //时间选择器类型  List<DateTimePickerType> pickerType;  //字体样式  TextStyle cancelStyle;  TextStyle titleStyle;  TextStyle sureStyle;  TextStyle contentStyle;  TextStyle unitStyle;  //时间  DateTime startDate;  DateTime defaultDate;  DateTime endDate;  ///以下为滚轮属性  //高度  double itemHeight;  double itemWidth;  // 半径大小,越大则越平面,越小则间距越大  double diameterRatio;  // 选中item偏移  double offAxisFraction;  //表示车轮水平偏离中心的程度  范围[0,0.01]  double perspective;  //放大倍率  double magnification;  //是否启用放大镜  bool useMagnifier;  //1或者2  double squeeze;  ScrollPhysics physics;  ///内置变量  List<String> yearData = [];  List<String> monthData = [];  List<String> dayData = [];  List<String> hourData = [];  List<String> minuteData = [];  List<String> secondData = [];  FixedExtentScrollController controllerYear, controllerMonth,      controllerDay, controllerHour, controllerMinute, controllerSecond;  StateSetter setState;  DateTimePicker({Key key, this.cancelStyle, this.unitStyle, this.sureStyle, this.titleStyle, this.contentStyle,    this.startDate, this.endDate,    this.defaultDate, this.itemHeight,    this.cancelTap, this.sureTap,    this.dual, this.sureText,    this.cancelText, this.titleText,    this.backgroundColor, this.squeeze,    this.height, this.unit, this.showUnit,    this.diameterRatio,    this.offAxisFraction, this.perspective,    this.magnification, this.useMagnifier, this.pickerType,    this.itemWidth,  }) {    TextStyle textStyle = TextStyle(fontSize: 14, color: Colors.black, decoration: TextDecoration.none,        decorationStyle: TextDecorationStyle.dashed);    //滚轮样式    if (itemWidth == null) itemWidth = (BaseUtils.getWidth() - BaseUtils.getWidth(20)) / 7;    if (diameterRatio == null) diameterRatio = 1;    if (offAxisFraction == null) offAxisFraction = 0;    if (perspective == null) perspective = 0.01;    if (magnification == null) magnification = 1.5;    if (useMagnifier == null) useMagnifier = true;    if (squeeze == null) squeeze = 1;    //其他属性设置    if (height == null) height = BaseUtils.getHeight() / 4;    if (showUnit == null) showUnit = true;    if (dual == null) dual = true;    //文字设置    if (sureText == null) sureText = 'sure';    if (cancelText == null) cancelText = 'cancel';    if (titleText == null) titleText = 'title';    //样式设置    if (contentStyle == null) contentStyle = textStyle;    if (cancelStyle == null) cancelStyle = textStyle;    if (titleStyle == null) titleStyle = textStyle;    if (sureStyle == null) sureStyle = textStyle;    if (unitStyle == null) unitStyle = textStyle.copyWith(fontSize: 13);    //类型设置    if (pickerType == null) pickerType = DateTimePickerType.values;    if (unit == null) unit = defaultUnit;    if (startDate == null) startDate = DateTime.now();    if (endDate == null) {      endDate = startDate.add(Duration(days: 3650));    } else {      if (startDate.isBefore(endDate)) {        endDate = startDate.add(Duration(days: 3650));      }    }    if (defaultDate == null) defaultDate = startDate;    ///初始化每个Wheel数组    int year = endDate.year - startDate.year;    if (year > 1) {      for (int i = 0; i < year; i++) {        yearData.add((startDate.year + i).toString());      }    } else {      yearData.add((startDate.year).toString());    }    monthData = addList(12, startNumber: 1);    dayData = calculateDayNumber();    hourData = addList(24);    minuteData = addList(60);    secondData = addList(60);    controllerYear = FixedExtentScrollController(initialItem: yearData.indexOf(defaultDate.year.toString()));    controllerMonth = FixedExtentScrollController(initialItem: monthData.indexOf(defaultDate.month.toString()));    controllerDay = FixedExtentScrollController(initialItem: dayData.indexOf(defaultDate.day.toString()));    controllerHour = FixedExtentScrollController(initialItem: hourData.indexOf(defaultDate.hour.toString()));    controllerMinute = FixedExtentScrollController(initialItem: minuteData.indexOf(defaultDate.minute.toString()));    controllerSecond = FixedExtentScrollController(initialItem: secondData.indexOf(defaultDate.second.toString()));  }  ///显示双数还是单数  valuePadLeft(String value) {    return dual ? value.padLeft(2, "0") : value;  }  //wheel数组添加数据  addList(maxNumber, {int startNumber: 0}) {    List<String> list = List();    for (int i = startNumber; i < (startNumber == 0 ? maxNumber : maxNumber + 1); i++) {      list.add(valuePadLeft(i.toString()));    }    return list;  }  ///计算每月day的数量  calculateDayNumber() {    int selectYearItem = controllerYear.selectedItem;    int selectMonthItem = controllerMonth.selectedItem;    var selectDate = DateTime(        int.parse(yearData[selectYearItem]), int.parse(monthData[selectMonthItem]));    String selectMonthNext;    String selectYearNext;    if ((selectYearItem + 1) == monthData.length) {      selectMonthNext = monthData[0];      if ((selectYearItem + 1) == yearData.length) {        selectYearNext = (endDate.year).toString();      } else {        selectYearNext = yearData[selectYearItem + 1];      }    } else {      selectMonthNext = monthData[selectMonthItem + 1];      selectYearNext = yearData[selectYearItem + 1];    }    var selectDateNext = DateTime(int.parse(selectYearNext), int.parse(selectMonthNext));    return addList(selectDateNext        .difference(selectDate)        .inDays, startNumber: 1);  }  ///刷新day数  refreshDay() {    int selectDayItem = controllerDay.selectedItem;    List<String> calculateDayNumberList = calculateDayNumber();    if (calculateDayNumberList.length != dayData.length) {      dayData = calculateDayNumber();      setState(() {});      int selectIndex = 27;      if (selectDayItem > selectIndex) {        animateTo(selectIndex - 1, controllerDay);      } else {        animateTo(selectDayItem, controllerDay);      }    }  }  sureTapVoid() {    if (sureTap != null) {      String dateTime = '';      if (pickerType.contains(DateTimePickerType.year)) dateTime = controllerYear.selectedItem.toString() + '-';      if (pickerType.contains(DateTimePickerType.month)) dateTime += controllerMonth.selectedItem.toString() + '-';      if (pickerType.contains(DateTimePickerType.day)) dateTime += controllerDay.selectedItem.toString() + ' ';      if (pickerType.contains(DateTimePickerType.hour)) dateTime += controllerHour.selectedItem.toString();      if (pickerType.contains(DateTimePickerType.minute)) dateTime += ':' + controllerMinute.selectedItem.toString();      if (pickerType.contains(DateTimePickerType.second)) dateTime += ':' + controllerSecond.selectedItem.toString();      sureTap(dateTime);    }  }  @override  Widget build(BuildContext context) {    return CustomFlex(      mainAxisSize: MainAxisSize.min,      height: height,      decoration: BoxDecoration(color: backgroundColor ?? Colors.white),      padding: EdgeInsets.all(BaseUtils.getWidth(10)),      children: <Widget>[        Row(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: <Widget>[            CustomButton(              padding: EdgeInsets.symmetric(horizontal: BaseUtils.getWidth(5), vertical: BaseUtils.getWidth(5)),              text: cancelText,              textStyle: cancelStyle,              onTap: cancelTap,),            CustomButton(text: titleText, textStyle: titleStyle),            CustomButton(              padding: EdgeInsets.symmetric(horizontal: BaseUtils.getWidth(5), vertical: BaseUtils.getWidth(5)),              text: sureText,              textStyle: sureStyle,              onTap: sureTapVoid,)          ],),        Expanded(child: Row(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: <Widget>[            wheelItem(yearData,                controller: controllerYear,                offstage: pickerType.contains(DateTimePickerType.year),                unit: unit.year ?? defaultUnit.year),            wheelItem(monthData,              controller: controllerMonth,              offstage: pickerType.contains(DateTimePickerType.month),              unit: unit.month ?? defaultUnit.month,            ),            StatefulBuilder(builder: (BuildContext context, StateSetter state) {              setState = state;              return wheelItem(dayData,                offstage: pickerType.contains(DateTimePickerType.day),                controller: controllerDay,                unit: unit.day ?? defaultUnit.day,              );            },),            wheelItem(hourData,              offstage: pickerType.contains(DateTimePickerType.hour),              unit: unit.hour ?? defaultUnit.hour,              controller: controllerHour,            ),            wheelItem(minuteData,              controller: controllerMinute,              unit: unit.minute ?? defaultUnit.minute,              offstage: pickerType.contains(DateTimePickerType.minute),            ),            wheelItem(secondData,              controller: controllerSecond,              unit: unit.second ?? defaultUnit.second,              offstage: pickerType.contains(DateTimePickerType.second),            ),          ],))      ],    );  }  Widget wheelItem(List<String> list,      {WheelChangedListener onItemSelected, bool offstage, FixedExtentScrollController controller, String unit}) {    return Offstage(        offstage: !offstage,        child: CustomFlex(            direction: Axis.horizontal,            mainAxisAlignment: MainAxisAlignment.center,            crossAxisAlignment: CrossAxisAlignment.center,            width: itemWidth,            children: !showUnit ? null : <Widget>[              Expanded(child: listWheel(list, onItemSelected, controller)),              Container(                  margin: EdgeInsets.only(left: BaseUtils.getWidth(2)),                  alignment: Alignment.center,                  height: double.infinity,                  child: Text(unit, style: unitStyle))            ],            child: showUnit ? null : listWheel(list, onItemSelected, controller)));  }  Widget listWheel(List<String> list, onItemSelected, FixedExtentScrollController controller) {    return ListWheel(        controller: controller,        itemExtent: itemHeight,        diameterRatio: diameterRatio,        offAxisFraction: offAxisFraction,        perspective: perspective,        magnification: magnification,        useMagnifier: useMagnifier,        squeeze: squeeze,        physics: physics,        itemBuilder: (BuildContext context, int index) {          return Text(list[index].toString(), style: contentStyle);        },        itemCount: list.length,        onItemSelected: onItemSelected //(int index, double pixels) {},    );  }  animateTo(int index, FixedExtentScrollController controller, {Duration duration}) {    if (controller != null) {      BaseUtils.timerUtils(Duration(milliseconds: 10), () {        controller.animateToItem(index,            duration: duration ?? Duration(milliseconds: 1), curve: Curves.linear);      });    }  }}
import 'package:flutter/material.dart';import 'package:flutter_waya/src/constant/WayColor.dart';import 'package:flutter_waya/src/model/MapModel.dart';import 'package:flutter_waya/src/widget/picker/ListWheel.dart';import 'package:flutter_waya/waya.dart';class DateTimePicker extends StatelessWidget {  //补全双位数  final bool dual;  //单位是否显示  final bool showUnit;  //点击事件  final GestureTapCallback cancelTap;  final ValueChanged<String> sureTap;  //文字  final String sureText;  final String cancelText;  final String titleText;  //容器属性  final Color backgroundColor;  final double height;  //时间选择器单位  final DateTimePickerUnit unit;  final DateTimePickerUnit defaultUnit;  //时间选择器类型  final List<DateTimePickerType> pickerType;  //字体样式  final TextStyle cancelStyle;  final TextStyle titleStyle;  final TextStyle sureStyle;  final TextStyle contentStyle;  final TextStyle unitStyle;  //时间  final DateTime startDate;  final DateTime defaultDate;  final DateTime endDate;  ///以下为滚轮属性  //高度  final double itemHeight;  final double itemWidth;  // 半径大小,越大则越平面,越小则间距越大  final double diameterRatio;  // 选中item偏移  final double offAxisFraction;  //表示车轮水平偏离中心的程度  范围[0,0.01]  final double perspective;  //放大倍率  final double magnification;  //是否启用放大镜  final bool useMagnifier;  //1或者2  final double squeeze;  final ScrollPhysics physics;  final TextStyle textStyle;  ///内置变量  List<String> yearData = [],      monthData = [],      dayData = [],      hourData = [],      minuteData = [],      secondData = [];  FixedExtentScrollController controllerYear,      controllerMonth,      controllerDay,      controllerHour,      controllerMinute,      controllerSecond;  StateSetter setState;  DateTimePicker({    Key key,    bool dual,    bool showUnit,    String sureText,    String cancelText,    String titleText,    double height,    DateTimePickerUnit unit,    List<DateTimePickerType> pickerType,    TextStyle cancelStyle,    TextStyle titleStyle,    TextStyle sureStyle,    TextStyle contentStyle,    TextStyle unitStyle,    DateTime startDate,    DateTime endDate,    DateTime defaultDate,    double itemWidth,    this.diameterRatio,    this.offAxisFraction,    this.perspective,    this.magnification,    this.useMagnifier: true,    this.squeeze,    this.itemHeight,    this.physics,    this.backgroundColor,    this.cancelTap,    this.sureTap,  })      : this.itemWidth = itemWidth ?? (Tools.getWidth() - Tools.getWidth(20)) / 7,  //其他属性设置        this.height = height ?? Tools.getHeight() / 4,        this.showUnit = showUnit ?? true,        this.dual = dual ?? true,  //文字设置        this.sureText = sureText ?? 'sure',        this.cancelText = cancelText ?? 'cancel',        this.titleText = titleText ?? 'title',  //样式设置        this.textStyle = textStyleVoid(),        this.contentStyle = contentStyle ?? textStyleVoid(),        this.cancelStyle = cancelStyle ?? textStyleVoid(),        this.titleStyle = titleStyle ?? textStyleVoid(),        this.sureStyle = sureStyle ?? textStyleVoid(),        this.unitStyle = unitStyle ?? textStyleVoid().copyWith(fontSize: 13),  //类型设置        this.pickerType = pickerType ?? DateTimePickerType.values,        this.unit = unit ?? DateTimePickerUnit(year: 'Y',            month: 'M',            day: 'D',            hour: 'H',            minute: 'M',            second: 'S'),        this.defaultUnit = DateTimePickerUnit(year: 'Y',            month: 'M',            day: 'D',            hour: 'H',            minute: 'M',            second: 'S'),        this.startDate = initStartDate(startDate),        this.endDate = initEndDate(startDate, endDate),        this.defaultDate = initDefaultDate(defaultDate, startDate, endDate),        super(key: key) {    var sDate = initStartDate(startDate);    var eDate = initEndDate(startDate, endDate);    var dDate = initDefaultDate(defaultDate, startDate, endDate);    ///初始化每个Wheel数组    int year = (eDate.year - sDate.year) + 1;    for (int i = 0; i < year; i++) {      int singleYear = sDate.year + i;      yearData.add((sDate.year + i).toString());      if (dDate.year == singleYear) {        this.controllerYear = FixedExtentScrollController(initialItem: i);      }    }    this.controllerMonth = FixedExtentScrollController(initialItem: this.defaultDate.month - 1);    this.controllerDay = FixedExtentScrollController(initialItem: this.defaultDate.day - 1);    this.controllerHour = FixedExtentScrollController(initialItem: this.defaultDate.hour);    this.controllerMinute = FixedExtentScrollController(initialItem: this.defaultDate.minute);    this.controllerSecond = FixedExtentScrollController(initialItem: this.defaultDate.second);    this.monthData = addList(12, startNumber: 1);    this.dayData = calculateDayNumber(isFirst: true);    this.hourData = addList(24);    this.minuteData = addList(60);    this.secondData = addList(60);  }  static DateTime initStartDate(DateTime startDate) {    return startDate ?? DateTime.now();  }  static DateTime initDefaultDate(DateTime defaultDate, DateTime startDate, DateTime endDate) {    if (startDate == null) startDate = initStartDate(startDate);    if (endDate == null) endDate = initEndDate(startDate, endDate);    if (defaultDate != null && defaultDate.isAfter(endDate)) {      return endDate;    }    return startDate;  }  static DateTime initEndDate(DateTime startDate, DateTime endDate) {    var sDate = initStartDate(startDate);    if (endDate != null && sDate.isAfter(endDate)) {      return sDate.add(Duration(days: 3650));    }    return sDate.add(Duration(days: 3650));  }  static textStyleVoid() {    return TextStyle(        fontSize: 14,        color: getColors(black),        decoration: TextDecoration.none,        decorationStyle: TextDecorationStyle.dashed);  }  ///显示双数还是单数  valuePadLeft(String value) {    return dual ? value.padLeft(2, "0") : value;  }  //wheel数组添加数据  addList(maxNumber, {int startNumber: 0}) {    List<String> list = List();    for (int i = startNumber; i < (startNumber == 0 ? maxNumber : maxNumber + 1); i++) {      list.add(valuePadLeft(i.toString()));    }    return list;  }  ///计算每月day的数量  calculateDayNumber({bool isFirst: false}) {    int selectYearItem = isFirst ? (defaultDate.year - startDate.year) : controllerYear.selectedItem;    int selectMonthItem = isFirst ? defaultDate.month : controllerMonth.selectedItem + 1;    if (selectMonthItem == 1 ||        selectMonthItem == 3 ||        selectMonthItem == 5 ||        selectMonthItem == 7 ||        selectMonthItem == 8 ||        selectMonthItem == 10 ||        selectMonthItem == 12) {      return addList(31, startNumber: 1);    }    if (selectMonthItem == 2) {      return addList(          DateTime(int.parse(yearData[selectYearItem]), 3)              .difference(DateTime(int.parse(yearData[selectYearItem]), 2))              .inDays,          startNumber: 1);    } else {      return addList(30, startNumber: 1);    }  }  ///刷新day数  refreshDay() {    int index = controllerDay.selectedItem;    List<String> newDayList = calculateDayNumber();    if (newDayList.length != dayData.length) {      dayData = newDayList;      setState(() {});      if (index > 25) {        jumpToIndex(25, controllerDay);        int newDayLength = newDayList.length;        if (index > (newDayLength - 1)) {          index = newDayLength - 1;        }      }      Tools.timerTools(Duration(milliseconds: 8), () {        jumpToIndex(index, controllerDay);      });    }  }  sureTapVoid() {    if (sureTap != null) {      String dateTime = '';      if (pickerType.contains(DateTimePickerType.year)) dateTime = yearData[controllerYear.selectedItem] + '-';      if (pickerType.contains(DateTimePickerType.month)) dateTime += monthData[controllerMonth.selectedItem] + '-';      if (pickerType.contains(DateTimePickerType.day)) dateTime += dayData[controllerDay.selectedItem] + ' ';      if (pickerType.contains(DateTimePickerType.hour)) dateTime += hourData[controllerHour.selectedItem];      if (pickerType.contains(DateTimePickerType.minute)) dateTime += ':' + minuteData[controllerMinute.selectedItem];      if (pickerType.contains(DateTimePickerType.second)) dateTime += ':' + secondData[controllerSecond.selectedItem];      sureTap(dateTime.trim());    }  }  @override  Widget build(BuildContext context) {    return CustomFlex(      mainAxisSize: MainAxisSize.min,      height: height,      decoration: BoxDecoration(color: backgroundColor ?? getColors(white)),      padding: EdgeInsets.all(Tools.getWidth(10)),      children: <Widget>[        Row(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: <Widget>[            CustomButton(              padding: EdgeInsets.symmetric(horizontal: Tools.getWidth(5), vertical: Tools.getWidth(5)),              text: cancelText,              textStyle: cancelStyle,              onTap: cancelTap,            ),            CustomButton(text: titleText, textStyle: titleStyle),            CustomButton(              padding: EdgeInsets.symmetric(horizontal: Tools.getWidth(5), vertical: Tools.getWidth(5)),              text: sureText,              textStyle: sureStyle,              onTap: sureTapVoid,            )          ],        ),        Expanded(            child: Row(              mainAxisAlignment: MainAxisAlignment.center,              children: <Widget>[                wheelItem(yearData,                    controller: controllerYear,                    offstage: pickerType.contains(DateTimePickerType.year),                    unit: unit?.year ?? defaultUnit.year, onItemSelected: (int newIndex) {                      refreshDay();                      limitStartAndEnd();                    }),                wheelItem(monthData,                    controller: controllerMonth,                    offstage: pickerType.contains(DateTimePickerType.month),                    unit: unit?.month ?? defaultUnit.month, onItemSelected: (int newIndex) {                      refreshDay();                      limitStartAndEnd();                    }),                StatefulBuilder(                  builder: (BuildContext context, StateSetter state) {                    setState = state;                    return wheelItem(dayData,                        offstage: pickerType.contains(DateTimePickerType.day),                        controller: controllerDay,                        unit: unit?.day ?? defaultUnit.day, onItemSelected: (int newIndex) {                          limitStartAndEnd();                        });                  },                ),                wheelItem(hourData,                    offstage: pickerType.contains(DateTimePickerType.hour),                    unit: unit?.hour ?? defaultUnit.hour,                    controller: controllerHour, onItemSelected: (int newIndex) {                      limitStartAndEnd();                    }),                wheelItem(minuteData,                    controller: controllerMinute,                    unit: unit?.minute ?? defaultUnit.minute,                    offstage: pickerType.contains(DateTimePickerType.minute), onItemSelected: (int newIndex) {                      limitStartAndEnd();                    }),                wheelItem(secondData,                    controller: controllerSecond,                    unit: unit?.second ?? defaultUnit.second,                    offstage: pickerType.contains(DateTimePickerType.second), onItemSelected: (int newIndex) {                      limitStartAndEnd();                    }),              ],            ))      ],    );  }  Widget wheelItem(List<String> list,      {bool offstage, FixedExtentScrollController controller, String unit, WheelChangedListener onItemSelected}) {    return Offstage(        offstage: !offstage,        child: CustomFlex(            direction: Axis.horizontal,            mainAxisAlignment: MainAxisAlignment.center,            crossAxisAlignment: CrossAxisAlignment.center,            width: itemWidth,            children: !showUnit                ? null                : <Widget>[              Expanded(child: listWheel(list, controller, onItemSelected)),              Container(                  margin: EdgeInsets.only(left: Tools.getWidth(2)),                  alignment: Alignment.center,                  height: double.infinity,                  child: Text(unit, style: unitStyle))            ],            child: showUnit ? null : listWheel(list, controller, onItemSelected)));  }  Widget listWheel(List<String> list, FixedExtentScrollController controller, WheelChangedListener onItemSelected) {    return ListWheel(        controller: controller,        itemExtent: itemHeight,        diameterRatio: diameterRatio,        offAxisFraction: offAxisFraction,        perspective: perspective,        magnification: magnification,        useMagnifier: useMagnifier,        squeeze: squeeze,        physics: physics,        itemBuilder: (BuildContext context, int index) {          return Text(list[index].toString(), style: contentStyle);        },        itemCount: list.length,        onItemSelected: onItemSelected);  }  limitStartAndEnd() {    var selectDateTime = DateTime.parse(        '${yearData[controllerYear.selectedItem]}-${monthData[controllerMonth.selectedItem]}-${dayData[controllerDay            .selectedItem]} ${hourData[controllerHour.selectedItem]}:${minuteData[controllerMinute            .selectedItem]}:${secondData[controllerSecond.selectedItem]}');    if (selectDateTime.isBefore(startDate)) {      return true;    } else if (selectDateTime.isAfter(endDate)) {      return false;    } else {      return null;    }  }  jumpToIndex(int index, FixedExtentScrollController controller, {Duration duration}) {    if (controller != null) {      controller.jumpToItem(index);    }  }}
import 'package:flutter/widgets.dart';import 'package:flutter_waya/flutter_waya.dart';import 'package:flutter_waya/src/constant/WayColor.dart';import 'package:flutter_waya/src/constant/WayStyles.dart';import 'package:flutter_waya/src/model/MapModel.dart';import 'package:flutter_waya/src/widget/picker/ListWheel.dart';class DateTimePicker extends StatefulWidget {  ///补全双位数  final bool dual;  ///单位是否显示  final bool showUnit;  ///点击事件  final GestureTapCallback cancelTap;  final ValueChanged<String> sureTap;  ///title底部内容  final Widget titleBottom;  final Widget sure;  final Widget cancel;  final Widget title;  ///容器属性  final Color backgroundColor;  final double height;  ///时间选择器单位  final DateTimePickerUnit unit;  final DateTimePickerUnit defaultUnit;  ///时间选择器类型  final List<DateTimePickerType> pickerType;  ///字体样式  final TextStyle unitStyle;  final TextStyle contentStyle;  ///时间  final DateTime startDate;  final DateTime defaultDate;  final DateTime endDate;  ///以下为滚轮属性  ///高度  final double itemHeight;  final double itemWidth;  /// 半径大小,越大则越平面,越小则间距越大  final double diameterRatio;  /// 选中item偏移  final double offAxisFraction;  ///表示车轮水平偏离中心的程度  范围[0,0.01]  final double perspective;  ///放大倍率  final double magnification;  ///是否启用放大镜  final bool useMagnifier;  ///1或者2  final double squeeze;  final ScrollPhysics physics;  DateTimePicker({    Key key,    bool dual,    bool showUnit,    double height,    double itemWidth,    Widget titleBottom,    Widget sure,    Widget cancel,    Widget title,    this.diameterRatio,    this.offAxisFraction,    this.perspective,    this.magnification,    this.useMagnifier: true,    this.squeeze,    this.itemHeight,    this.physics,    this.backgroundColor,    this.cancelTap,    this.sureTap,    this.unit,    this.defaultUnit,    this.pickerType,    this.unitStyle,    this.contentStyle,    this.startDate,    this.defaultDate,    this.endDate,  })  : this.itemWidth = itemWidth ?? (Tools.getWidth() - Tools.getWidth(20)) / 7,        this.titleBottom = titleBottom ?? Container(),        this.sure = sure ?? Text('sure', style: WayStyles.textStyleBlack70()),        this.title = title ?? Text('title', style: WayStyles.textStyleBlack70()),        this.cancel = cancel ?? Text('cancel', style: WayStyles.textStyleBlack70()),        ///其他属性设置        this.height = height ?? Tools.getHeight() / 4,        this.showUnit = showUnit ?? true,        this.dual = dual ?? true,        super(key: key);  @override  State<StatefulWidget> createState() {    return DateTimePickerState();  }}class DateTimePickerState extends State<DateTimePicker> {  ///内置变量  List<String> yearData = [], monthData = [], dayData = [], hourData = [], minuteData = [], secondData = [];  FixedExtentScrollController controllerYear,      controllerMonth,      controllerDay,      controllerHour,      controllerMinute,      controllerSecond;  ///字体样式  TextStyle contentStyle;  TextStyle unitStyle;  ///时间  DateTime startDate;  DateTime defaultDate;  DateTime endDate;  List<DateTimePickerType> pickerType;  DateTimePickerUnit unit;  DateTimePickerUnit defaultUnit =      DateTimePickerUnit(year: 'Y', month: 'M', day: 'D', hour: 'H', minute: 'M', second: 'S');  int dayIndex = 0;  @override  void initState() {    super.initState();    ///样式设置    contentStyle = widget.contentStyle ?? textStyleVoid();    unitStyle = widget.unitStyle ?? textStyleVoid();    ///类型设置    pickerType = widget.pickerType ?? DateTimePickerType.values;    unit = widget.unit ?? defaultUnit;    startDate = widget.startDate ?? DateTime.now();    endDate = initEndDate();    defaultDate = initDefaultDate();    ///初始化每个Wheel数组    int year = (endDate.year - startDate.year) + 1;    for (int i = 0; i < year; i++) {      yearData.add((startDate.year + i).toString());    }    controllerYear = FixedExtentScrollController(initialItem: defaultDate.year - startDate.year);    controllerMonth = FixedExtentScrollController(initialItem: defaultDate.month - 1);    controllerDay = FixedExtentScrollController(initialItem: defaultDate.day - 1);    controllerHour = FixedExtentScrollController(initialItem: defaultDate.hour);    controllerMinute = FixedExtentScrollController(initialItem: defaultDate.minute);    controllerSecond = FixedExtentScrollController(initialItem: defaultDate.second);    monthData = addList(12, startNumber: 1);    dayData = calculateDayNumber(isFirst: true);    hourData = addList(24);    minuteData = addList(60);    secondData = addList(60);  }  DateTime initDefaultDate() {    if (widget.defaultDate == null) return startDate;    if (widget.defaultDate.isBefore(startDate)) return startDate;    if (widget.defaultDate.isAfter(endDate)) return endDate;    return widget.defaultDate;  }  DateTime initEndDate() {    if (widget.endDate != null && startDate.isAfter(widget.endDate)) return widget.endDate;    return startDate.add(Duration(days: 3650));  }  textStyleVoid() {    return TextStyle(        fontSize: 14,        color: getColors(black),        decoration: TextDecoration.none,        decorationStyle: TextDecorationStyle.dashed);  }  ///显示双数还是单数  valuePadLeft(String value) {    return widget.dual ? value.padLeft(2, "0") : value;  }  ///wheel数组添加数据  addList(maxNumber, {int startNumber: 0}) {    List<String> list = List();    for (int i = startNumber; i < (startNumber == 0 ? maxNumber : maxNumber + 1); i++) {      list.add(valuePadLeft(i.toString()));    }    return list;  }  ///计算每月day的数量  calculateDayNumber({bool isFirst: false}) {    int selectYearItem = isFirst ? (defaultDate.year - startDate.year) : controllerYear.selectedItem;    int selectMonthItem = isFirst ? defaultDate.month : controllerMonth.selectedItem + 1;    if (selectMonthItem == 1 ||        selectMonthItem == 3 ||        selectMonthItem == 5 ||        selectMonthItem == 7 ||        selectMonthItem == 8 ||        selectMonthItem == 10 ||        selectMonthItem == 12) {      return addList(31, startNumber: 1);    }    if (selectMonthItem == 2) {      return addList(          DateTime(int.parse(yearData[selectYearItem]), 3)              .difference(DateTime(int.parse(yearData[selectYearItem]), 2))              .inDays,          startNumber: 1);    } else {      return addList(30, startNumber: 1);    }  }  StateSetter stateSetter;  ///刷新day数  refreshDay() {    dayIndex = controllerDay.selectedItem;    int oldDayIndex;    List<String> newDayList = calculateDayNumber();    if (newDayList.length != dayData.length) {      dayData = newDayList;      oldDayIndex = dayIndex;      if (dayIndex > 25) {        jumpToIndex(25, controllerDay);        int newDayLength = newDayList.length;        if (dayIndex > (newDayLength - 1)) {          dayIndex = newDayLength - 1;        }      }      stateSetter(() {});      Tools.timerTools(Duration(milliseconds: 10), () {        jumpToIndex(oldDayIndex, controllerDay);      });    }  }  ///点击确定返回日期  sureTapVoid() {    if (widget.sureTap != null) {      String dateTime = '';      if (pickerType.contains(DateTimePickerType.year)) dateTime = yearData[controllerYear.selectedItem] + '-';      if (pickerType.contains(DateTimePickerType.month)) dateTime += monthData[controllerMonth.selectedItem] + '-';      if (pickerType.contains(DateTimePickerType.day)) dateTime += dayData[controllerDay.selectedItem] + ' ';      if (pickerType.contains(DateTimePickerType.hour)) dateTime += hourData[controllerHour.selectedItem];      if (pickerType.contains(DateTimePickerType.minute)) dateTime += ':' + minuteData[controllerMinute.selectedItem];      if (pickerType.contains(DateTimePickerType.second)) dateTime += ':' + secondData[controllerSecond.selectedItem];      widget.sureTap(dateTime.trim());    }  }  @override  Widget build(BuildContext context) {    return CustomFlex(      onTap: () {},      mainAxisSize: MainAxisSize.min,      height: widget.height,      decoration: BoxDecoration(color: widget.backgroundColor ?? getColors(white)),      children: <Widget>[        CustomFlex(          direction: Axis.horizontal,          padding: EdgeInsets.all(Tools.getWidth(10)),          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: <Widget>[            CustomFlex(child: widget.cancel, onTap: widget.cancelTap),            Container(child: widget.title),            CustomFlex(child: widget.sure, onTap: sureTapVoid)          ],        ),        widget.titleBottom,        Expanded(            child: Row(          mainAxisAlignment: MainAxisAlignment.center,          children: <Widget>[            wheelItem(yearData,                controller: controllerYear,                offstage: pickerType.contains(DateTimePickerType.year),                unit: unit.year ?? defaultUnit.year, onItemSelected: (int newIndex) {              refreshDay();              limitStartAndEnd();            }),            wheelItem(monthData,                controller: controllerMonth,                offstage: pickerType.contains(DateTimePickerType.month),                unit: unit.month ?? defaultUnit.month, onItemSelected: (int newIndex) {              refreshDay();              limitStartAndEnd();            }),            StatefulBuilder(builder: (BuildContext ctx, StateSetter _stateSetter) {              stateSetter = _stateSetter;              return wheelItem(dayData,                  offstage: pickerType.contains(DateTimePickerType.day),                  controller: controllerDay,                  unit: unit.day ?? defaultUnit.day, onItemSelected: (int newIndex) {                dayIndex = newIndex;                limitStartAndEnd();              });            }),            wheelItem(hourData,                offstage: pickerType.contains(DateTimePickerType.hour),                unit: unit.hour ?? defaultUnit.hour,                controller: controllerHour, onItemSelected: (int newIndex) {              limitStartAndEnd();            }),            wheelItem(minuteData,                controller: controllerMinute,                unit: unit.minute ?? defaultUnit.minute,                offstage: pickerType.contains(DateTimePickerType.minute), onItemSelected: (int newIndex) {              limitStartAndEnd();            }),            wheelItem(secondData,                controller: controllerSecond,                unit: unit.second ?? defaultUnit.second,                offstage: pickerType.contains(DateTimePickerType.second), onItemSelected: (int newIndex) {              limitStartAndEnd();            }),          ],        ))      ],    );  }  Widget wheelItem(List<String> list,      {bool offstage, FixedExtentScrollController controller, String unit, WheelChangedListener onItemSelected}) {    return Offstage(        offstage: !offstage,        child: CustomFlex(            direction: Axis.horizontal,            mainAxisAlignment: MainAxisAlignment.center,            crossAxisAlignment: CrossAxisAlignment.center,            width: widget.itemWidth,            children: !widget.showUnit                ? null                : <Widget>[                    Expanded(child: listWheel(list, controller, onItemSelected)),                    Container(                        margin: EdgeInsets.only(left: Tools.getWidth(2)),                        alignment: Alignment.center,                        height: double.infinity,                        child: Text(unit, style: unitStyle))                  ],            child: widget.showUnit ? null : listWheel(list, controller, onItemSelected)));  }  Widget listWheel(List<String> list, FixedExtentScrollController controller, WheelChangedListener onItemSelected) {    return ListWheel(        controller: controller,        itemExtent: widget.itemHeight,        diameterRatio: widget.diameterRatio,        offAxisFraction: widget.offAxisFraction,        perspective: widget.perspective,        magnification: widget.magnification,        useMagnifier: widget.useMagnifier,        squeeze: widget.squeeze,        physics: widget.physics,        itemBuilder: (BuildContext context, int index) {          return Text(list[index].toString(), style: contentStyle);        },        itemCount: list.length,        onItemSelected: onItemSelected);  }  limitStartAndEnd() {    var selectDateTime = DateTime.parse(        '${yearData[controllerYear.selectedItem]}-${monthData[controllerMonth.selectedItem]}-${dayData[controllerDay.selectedItem]} ${hourData[controllerHour.selectedItem]}:${minuteData[controllerMinute.selectedItem]}:${secondData[controllerSecond.selectedItem]}');    if (selectDateTime.isBefore(startDate)) {      return true;    } else if (selectDateTime.isAfter(endDate)) {      return false;    } else {      return null;    }  }  jumpToIndex(int index, FixedExtentScrollController controller, {Duration duration}) {    if (controller != null) {      controller.jumpToItem(index);    }  }}
import 'package:flutter/material.dart';import 'package:flutter_waya/flutter_waya.dart';import 'package:flutter_waya/src/constant/colors.dart';import 'package:flutter_waya/src/constant/styles.dart';class Loading extends Dialog {  final double value;  final Color backgroundColor;  final Animation<Color> valueColor;  final String semanticsLabel;  final String semanticsValue;  final LoadingType loadingType;  final TextStyle textStyle;  final double strokeWidth;  final String text;  final Widget child;  ///是否开始背景模糊  final bool gaussian;  final bool animatedOpacity;  Loading({    Key key,    LoadingType loadingType,    TextStyle textStyle,    double strokeWidth,    String text,    Color backgroundColor,    this.gaussian,    this.animatedOpacity,    this.value,    this.child,    this.valueColor,    this.semanticsLabel,    this.semanticsValue,  })  : this.text = text ?? '加载中...',        this.textStyle = textStyle ?? WayStyles.textStyleBlack70(),        this.strokeWidth = strokeWidth ?? 4.0,        this.backgroundColor = backgroundColor ?? getColors(white),        this.loadingType = loadingType ?? LoadingType.circular,        super(key: key);  @override  Widget build(BuildContext context) {    List<Widget> children = [];    switch (loadingType) {      case LoadingType.circular:        children.add(CircularProgressIndicator(          value: value,          backgroundColor: backgroundColor,          valueColor: valueColor,          strokeWidth: strokeWidth,          semanticsLabel: semanticsLabel,          semanticsValue: semanticsValue,        ));        break;      case LoadingType.linear:        children.add(LinearProgressIndicator(          value: value,          backgroundColor: backgroundColor,          valueColor: valueColor,          semanticsLabel: semanticsLabel,          semanticsValue: semanticsValue,        ));        break;      case LoadingType.refresh:        children.add(RefreshProgressIndicator(          value: value,          backgroundColor: backgroundColor,          valueColor: valueColor,          strokeWidth: strokeWidth,          semanticsLabel: semanticsLabel,          semanticsValue: semanticsValue,        ));        break;    }    if (child == null) {      children.add(Container(        margin: EdgeInsets.only(top: Tools.getHeight(16)),        child: Text(          text,          style: textStyle,        ),      ));    } else {      children.add(child);    }    return AlertBase(      gaussian: gaussian,      alignment: Alignment.center,      onTap: () {},      child: Container(        padding: EdgeInsets.symmetric(            horizontal: Tools.getWidth(35), vertical: Tools.getWidth(20)),        decoration: BoxDecoration(          color: backgroundColor,          borderRadius: BorderRadius.circular(8.0),        ),        child: Column(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          crossAxisAlignment: CrossAxisAlignment.center,          mainAxisSize: MainAxisSize.min,          children: children,        ),      ),    );  }}
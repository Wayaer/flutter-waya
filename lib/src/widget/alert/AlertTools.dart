import 'package:flutter/cupertino.dart' hide Overlay, OverlayEntry, OverlayState;import 'package:flutter_waya/flutter_waya.dart';import 'package:flutter_waya/src/common/CommonWidget.dart';import 'package:flutter_waya/src/constant/WayColor.dart';import 'package:flutter_waya/src/widget/custom/overlay/OverlayBase.dart';import 'package:flutter_waya/src/widget/custom/overlay/OverlayEntry.dart';showToast(message, {Duration closeDuration}) {  AlertTools.showToast(message.toString(), closeDuration: closeDuration);}class AlertTools {  static Duration _duration = Duration(milliseconds: 1500);  /// 自定义弹窗  /// 无context 为底部弹出  static int alertWidget(Widget widget, {Duration closeDuration}) {    OverlayEntry entry = OverlayEntry(builder: (context) => widget);    overlayState.insert(entry);    if (closeDuration != null) {      Future.delayed(closeDuration).then((value) {        entry.remove();      });    } else {      return overlayState.overlayEntries.indexOf(entry);    }    return null;  }  ///设置全局弹窗时间  static void setToastDuration(Duration duration) {    _duration = duration;  }  static void showToast(String message,      {Color backgroundColor,      BoxDecoration boxDecoration,      GestureTapCallback onTap,      TextStyle textStyle,      Duration closeDuration}) {    AlertTools.alertWidget(        AlertBase(            backgroundColor: backgroundColor ?? getColors(transparent),            onTap: onTap ?? () {},            child: Container(              margin: EdgeInsets.symmetric(horizontal: Tools.getWidth() / 5, vertical: Tools.getHeight() / 4),              decoration:                  boxDecoration ?? BoxDecoration(color: getColors(black90), borderRadius: BorderRadius.circular(5)),              padding: EdgeInsets.all(Tools.getWidth(10)),              child: CommonWidget.textDefault(message, color: getColors(white)),            )),        closeDuration: closeDuration ?? _duration);  }  static void close() {    var overlayEntries = overlayState.overlayEntries;    if (overlayEntries.length > 1) {      overlayEntries.last.remove();    }  }  ///关闭所有非context Alert  static void closeAll() {    var overlayEntries = overlayState.overlayEntries;    if (overlayEntries.length > 1) {      overlayEntries.map((e) {        if (overlayEntries.indexOf(e) > 0) {          e.remove();        }      });    }  }  static void alertSureCancel(    Widget widget, {    GestureTapCallback sureTap,    GestureTapCallback cancelTap,    String cancelText,    String sureText,    Widget sure,    Widget cancel,    Color backgroundColor,    TextStyle cancelTextStyle,    TextStyle sureTextStyle,    double height,    bool isDismissible: true,    EdgeInsetsGeometry padding,    AlignmentGeometry alignment,    EdgeInsetsGeometry margin,    Decoration decoration,    bool animatedOpacity,    bool gaussian,  }) {    var alert = AlertSureCancel(      backsideTap: () {        if (isDismissible) close();      },      animatedOpacity: animatedOpacity,      gaussian: gaussian,      content: widget,      sureTap: sureTap ?? close,      cancelTap: cancelTap ?? close,      decoration: decoration,      margin: margin,      alignment: alignment,      cancelText: cancelText,      sureText: sureText,      height: height,      cancelTextStyle: cancelTextStyle,      sureTextStyle: sureTextStyle,      sure: sure,      cancel: cancel,      backgroundColor: backgroundColor,      padding: padding,    );    AlertTools.alertWidget(alert);  }  static void showLoading({    String text,    double value,    bool gaussian,    Color backgroundColor,    Animation<Color> valueColor,    double strokeWidth,    String semanticsLabel,    String semanticsValue,    LoadingType loadingType,    TextStyle textStyle,  }) {    var loading = Loading(      gaussian: gaussian,      text: text,      value: value,      backgroundColor: backgroundColor,      valueColor: valueColor,      strokeWidth: strokeWidth ?? 4.0,      semanticsLabel: semanticsLabel,      semanticsValue: semanticsValue,      loadingType: loadingType ?? LoadingType.circular,      textStyle: textStyle,    );    AlertTools.alertWidget(loading);  }}